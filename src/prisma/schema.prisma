// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id // Auth0 sub - unique identifier
  username  String?  @unique
  lastLogin DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post[]
  Vote      Vote[]
  Like      Like[]
}

model Post {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  title       String
  description String
  prompt      String
  tags        String[]
  Vote        Vote[]
  Like        Like[]
}

model Vote {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  value     VoteType
}

enum VoteType {
  UPVOTE
  DOWNVOTE
  REPORT
}

model Like {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  @@id([postId, userId])
}
